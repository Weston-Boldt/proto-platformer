PROTO-PLATFORMER
W-I-P (name not final)

i am in the first half of iteration 1 still

a note about what i mean about iterations
that is simply where i feel like the stages of development is going to be
none of this is set in stone and is entirely elastic, however i do need to have
a high level roadmap in order to keep track of what the heck to work on and prioritize
right now i have time to spend about 1 - 3 hours a night 4 nights a week on this game
so on inbetween days i can kind of forget what to hack on. maybe the readme is not a good
place for project management but i feel like at this time it might be manageable.

ITERATION 1
goals:
  get enough features added to extend into a bigger game
  this is less than a prototype, its more of a base to build the prototype on

ITERATION 2
goals:
  different enemies
  5 levels
  stub assets and finished assets
  beginning of polish

ITERATION 3
goals:
  polish
  
ITERATION 4
goals:
  -- if we are here i'm feeling like something must have gone horrible some where
  -- and we need to keep working so ideally the game is "shipped" before this point
  fix broken stuff
  polish more

features i've added
  jumping
  walking
  collisions
  entity spawning based on tiled
  trigger spawning based on tiled
  
features in development
  enemies -- spawning but don't do anything yet
  sensors -- a way for entities other than the player to 'see' whats going on
          -- could be a decent way to handle basic ai patterns
          -- they are showing up but not doing anything
  triggers -- should be automatic or by pressing the `action button` when overlapped
           -- that works but the triggers themselves dont do anything

features to dev next
  animations -- need to create more assets to animate but currently have a simple idle for blue guy
  health system
  enemy ai
  attack system
  power up system
  level progression -- going to next room in a level, or next level itself
  bosses

issues
  - needs a code cleanup session soon
  - currently too much code lives in the player class
    such as gravity, what i'm imagining is that humps.Class
    doesnt support a lot of features you would expect from inheritance models
    so what could be done instead is adding little functions in the entity class
    that can help, although not every entity will be affected by gravity so its a bit of a 
    issue
  - assets are basically done whenever i feel like it and need to be put to a schedule
  - lots of code can be factored and rm
